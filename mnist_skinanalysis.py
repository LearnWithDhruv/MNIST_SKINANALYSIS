# -*- coding: utf-8 -*-
"""MNIST_SkinAnalysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16CVPo-YkhUt5VMvAsO_Mp0hGf8P9pGo4
"""

from numpy.random import seed
seed(101)  # Set seed for numpy

import tensorflow as tf
tf.random.set_seed(101)  # Set seed for TensorFlow

import pandas as pd
import numpy as np
# Import necessary Keras modules from TensorFlow
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint

import os
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
import itertools
import shutil
import matplotlib.pyplot as plt

# Uncomment this if youâ€™re in Jupyter Notebook; otherwise, remove it
# %matplotlib inline

os.listdir('../content/Input')

base_dir = 'base_dir'
os.mkdir(base_dir)

# train_dir
train_dir = os.path.join(base_dir, 'train_dir')
os.mkdir(train_dir)

# val_dir
val_dir = os.path.join(base_dir, 'val_dir')
os.mkdir(val_dir)

# create new folders inside train_dir

nv = os.path.join(train_dir, 'nv')
os.mkdir(nv)
mel = os.path.join(train_dir, 'mel')
os.mkdir(mel)
bkl = os.path.join(train_dir, 'bkl')
os.mkdir(bkl)
bcc = os.path.join(train_dir, 'bcc')
os.mkdir(bcc)
akiec = os.path.join(train_dir, 'akiec')
os.mkdir(akiec)
vasc = os.path.join(train_dir, 'vasc')
os.mkdir(vasc)
df = os.path.join(train_dir, 'df')
os.mkdir(df)


# create new folders inside val_dir
nv = os.path.join(val_dir, 'nv')
os.mkdir(nv)
mel = os.path.join(val_dir, 'mel')
os.mkdir(mel)
bkl = os.path.join(val_dir, 'bkl')
os.mkdir(bkl)
bcc = os.path.join(val_dir, 'bcc')
os.mkdir(bcc)
akiec = os.path.join(val_dir, 'akiec')
os.mkdir(akiec)
vasc = os.path.join(val_dir, 'vasc')
os.mkdir(vasc)
df = os.path.join(val_dir, 'df')
os.mkdir(df)

df_data = pd.read_csv('../content/Input/HAM10000_metadata.csv')

df_data.head()

df = df_data.groupby('lesion_id').count()

# now we filter out lesion_id's that have only one image associated with it
df = df[df['image_id'] == 1]

df.reset_index(inplace=True)

df.head()

def identify_duplicates(x):

    unique_list = list(df['lesion_id'])

    if x in unique_list:
        return 'no_duplicates'
    else:
        return 'has_duplicates'

# create a new colum that is a copy of the lesion_id column
df_data['duplicates'] = df_data['lesion_id']
# apply the function to this new column
df_data['duplicates'] = df_data['duplicates'].apply(identify_duplicates)

df_data.head()

df_data['duplicates'].value_counts()

df = df_data[df_data['duplicates'] == 'no_duplicates']
df.shape

y = df['dx']

_, df_val = train_test_split(df, test_size=0.17, random_state=101, stratify=y)

df_val.shape

df_val['dx'].value_counts()

def identify_val_rows(x):
    # create a list of all the lesion_id's in the val set
    val_list = list(df_val['image_id'])

    if str(x) in val_list:
        return 'val'
    else:
        return 'train'

df_data['train_or_val'] = df_data['image_id']
# apply the function to this new column
df_data['train_or_val'] = df_data['train_or_val'].apply(identify_val_rows)

# filter out train rows
df_train = df_data[df_data['train_or_val'] == 'train']


print(len(df_train))
print(len(df_val))

df_train['dx'].value_counts()

df_val['dx'].value_counts()

df_data.set_index('image_id', inplace=True)

import zipfile
import os

def unzip_file(zip_file_path, extract_to_folder):
    if not os.path.exists(extract_to_folder):
        os.makedirs(extract_to_folder)

    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to_folder)

zip_file_path = '/content/HAM10000_images_part_1.zip'
extract_to_folder = './Input/HAM10000_images_part_1'

unzip_file(zip_file_path, extract_to_folder)

extracted_files = os.listdir(extract_to_folder)
print("Extracted files:", extracted_files)

import zipfile
import os

def unzip_file(zip_file_path, extract_to_folder):
    if not os.path.exists(extract_to_folder):
        os.makedirs(extract_to_folder)

    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to_folder)

zip_file_path = '/content/HAM10000_images_part_2.zip'
extract_to_folder = './Input/HAM10000_images_part_2'

unzip_file(zip_file_path, extract_to_folder)

extracted_files = os.listdir(extract_to_folder)
print("Extracted files:", extracted_files)

import os
import shutil

train_dir = './content/base_dir/train_dir'
val_dir = './content/base_dir/val_dir'

folder_1 = os.listdir('./Input/HAM10000_images_part_1')
folder_2 = os.listdir('./Input/HAM10000_images_part_2')

train_list = list(df_train['image_id'])
val_list = list(df_val['image_id'])

for image in train_list:
    fname = image + '.jpg'
    label = df_data.loc[image, 'dx']
    os.makedirs(os.path.join(train_dir, label), exist_ok=True)  # Ensure label folder exists

    if fname in folder_1:
        src = os.path.join('./Input/HAM10000_images_part_1', fname)
        dst = os.path.join(train_dir, label, fname)
        shutil.copyfile(src, dst)

    elif fname in folder_2:
        src = os.path.join('./Input/HAM10000_images_part_2', fname)
        dst = os.path.join(train_dir, label, fname)
        shutil.copyfile(src, dst)

for image in val_list:
    fname = image + '.jpg'
    label = df_data.loc[image, 'dx']
    os.makedirs(os.path.join(val_dir, label), exist_ok=True)  # Ensure label folder exists

    if fname in folder_1:
        src = os.path.join('./Input/HAM10000_images_part_1', fname)
        dst = os.path.join(val_dir, label, fname)
        shutil.copyfile(src, dst)

    elif fname in folder_2:
        src = os.path.join('./Input/HAM10000_images_part_2', fname)
        dst = os.path.join(val_dir, label, fname)
        shutil.copyfile(src, dst)

print(len(os.listdir('/content/base_dir/train_dir/nv')))
print(len(os.listdir('/content/base_dir/train_dir/mel')))
print(len(os.listdir('/content/base_dir/train_dir/bkl')))
print(len(os.listdir('/content/base_dir/train_dir/bcc')))
print(len(os.listdir('/content/base_dir/train_dir/akiec')))
print(len(os.listdir('/content/base_dir/train_dir/vasc')))
print(len(os.listdir('/content/base_dir/train_dir/df')))

print(len(os.listdir('/content/base_dir/val_dir/nv')))
print(len(os.listdir('/content/base_dir/val_dir/mel')))
print(len(os.listdir('/content/base_dir/val_dir/bkl')))
print(len(os.listdir('/content/base_dir/val_dir/bcc')))
print(len(os.listdir('/content/base_dir/val_dir/akiec')))
print(len(os.listdir('/content/base_dir/val_dir/vasc')))
print(len(os.listdir('/content/base_dir/val_dir/df')))

class_list = ['mel','bkl','bcc','akiec','vasc','df']

for item in class_list:

    # We are creating temporary directories here because we delete these directories later
    # create a base dir
    aug_dir = '/content/aug_dir'
    os.mkdir(aug_dir)
    # create a dir within the base dir to store images of the same class
    img_dir = os.path.join(aug_dir, 'img_dir')
    os.mkdir(img_dir)

    # Choose a class
    img_class = item

    # list all images in that directory
    img_list = os.listdir('/content/base_dir/train_dir/' + img_class)

    for fname in img_list:
            # source path to image
            src = os.path.join('/content/base_dir/train_dir/' + img_class, fname)
            # destination path to image
            dst = os.path.join(img_dir, fname)
            # copy the image from the source to the destination
            shutil.copyfile(src, dst)


    # point to a dir containing the images and not to the images themselves
    path = aug_dir
    save_path = '/content/base_dir/train_dir/' + img_class

    datagen = ImageDataGenerator(
        rotation_range=180,
        width_shift_range=0.1,
        height_shift_range=0.1,
        zoom_range=0.1,
        horizontal_flip=True,
        vertical_flip=True,
        #brightness_range=(0.9,1.1),
        fill_mode='nearest')

    batch_size = 50

    aug_datagen = datagen.flow_from_directory(path,
                                           save_to_dir=save_path,
                                           save_format='jpg',
                                                    target_size=(224,224),
                                                    batch_size=batch_size)
    num_aug_images_wanted = 6000 # total number of images we want to have in each class

    ###########

    num_files = len(os.listdir(img_dir))
    num_batches = int(np.ceil((num_aug_images_wanted-num_files)/batch_size))

    # run the generator and create about 6000 augmented images
    for i in range(0,num_batches):

        imgs, labels = next(aug_datagen)

    # delete temporary directory with the raw image files
    shutil.rmtree('aug_dir')

print(len(os.listdir('/content/base_dir/train_dir/nv')))
print(len(os.listdir('/content/base_dir/train_dir/mel')))
print(len(os.listdir('/content/base_dir/train_dir/bkl')))
print(len(os.listdir('/content/base_dir/train_dir/akiec')))
print(len(os.listdir('/content/base_dir/train_dir/vasc')))
print(len(os.listdir('/content/base_dir/train_dir/df')))

print(len(os.listdir('base_dir/val_dir/nv')))
print(len(os.listdir('base_dir/val_dir/mel')))
print(len(os.listdir('base_dir/val_dir/bkl')))
print(len(os.listdir('base_dir/val_dir/bcc')))
print(len(os.listdir('base_dir/val_dir/akiec')))
print(len(os.listdir('base_dir/val_dir/vasc')))
print(len(os.listdir('base_dir/val_dir/df')))

def plots(ims, figsize=(12,6), rows=5, interp=False, titles=None): # 12,6
    if type(ims[0]) is np.ndarray:
        ims = np.array(ims).astype(np.uint8)
        if (ims.shape[-1] != 3):
            ims = ims.transpose((0,2,3,1))
    f = plt.figure(figsize=figsize)
    cols = len(ims)//rows if len(ims) % 2 == 0 else len(ims)//rows + 1
    for i in range(len(ims)):
        sp = f.add_subplot(rows, cols, i+1)
        sp.axis('Off')
        if titles is not None:
            sp.set_title(titles[i], fontsize=16)
        plt.imshow(ims[i], interpolation=None if interp else 'none')

plots(imgs, titles=None) # titles=labels will display the image labels

train_path = 'base_dir/train_dir'
valid_path = 'base_dir/val_dir'

num_train_samples = len(df_train)
num_val_samples = len(df_val)
train_batch_size = 10
val_batch_size = 10
image_size = 224

train_steps = np.ceil(num_train_samples / train_batch_size)
val_steps = np.ceil(num_val_samples / val_batch_size)

import tensorflow as tf

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define data generators
datagen = ImageDataGenerator(
    preprocessing_function=tf.keras.applications.mobilenet.preprocess_input)

# Example paths and batch sizes
# train_path = './content/base_dir/train_dir'
# valid_path = './content/base_dir/val_dir'
# image_size = 224  # Example image size; adjust as needed
# train_batch_size = 32
# val_batch_size = 32

# Create the data generators
train_batches = datagen.flow_from_directory(train_path,
                                            target_size=(image_size,image_size),
                                            batch_size=train_batch_size)

valid_batches = datagen.flow_from_directory(valid_path,
                                            target_size=(image_size,image_size),
                                            batch_size=val_batch_size)


test_batches = datagen.flow_from_directory(valid_path,
                                            target_size=(image_size,image_size),
                                            batch_size=1,
                                            shuffle=False)

import tensorflow as tf

import tensorflow as tf

# Initialize the MobileNet model
mobile = tf.keras.applications.mobilenet.MobileNet()

mobile.summary()

type(mobile.layers)

len(mobile.layers)

x = mobile.layers[-6].output

# Create a new dense layer for predictions
# 7 corresponds to the number of classes
x = Dropout(0.25)(x)
predictions = Dense(7, activation='softmax')(x)

# inputs=mobile.input selects the input layer, outputs=predictions refers to the
# dense layer we created above.

model = Model(inputs=mobile.input, outputs=predictions)

model.summary()

for layer in model.layers[:-23]:
    layer.trainable = False

from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_accuracy, top_k_categorical_accuracy

def top_3_accuracy(y_true, y_pred):
    return top_k_categorical_accuracy(y_true, y_pred, k=3)

def top_2_accuracy(y_true, y_pred):
    return top_k_categorical_accuracy(y_true, y_pred, k=2)

# Compile the model with the updated learning rate argument
model.compile(Adam(learning_rate=0.01),
              loss='categorical_crossentropy',
              metrics=[categorical_accuracy, top_2_accuracy, top_3_accuracy])

print(valid_batches.class_indices)

class_weights={
    0: 1.0, # akiec
    1: 1.0, # bcc
    2: 1.0, # bkl
    3: 1.0, # df
    4: 3.0, # mel # Try to make the model more sensitive to Melanoma.
    5: 1.0, # nv
    6: 1.0, # vasc
}

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, GlobalAveragePooling2D
from tensorflow.keras.applications import MobileNet

# Define the input shape according to your data
input_shape = (224, 224, 3)  # Example input shape; adjust as needed

# Define the input layer
inputs = Input(shape=input_shape)

# Load the base model (e.g., MobileNet) without the top layer
base_model = MobileNet(include_top=False, input_tensor=inputs)

# Add additional layers
x = base_model.output
x = GlobalAveragePooling2D()(x)  # Flatten the output
x = Dense(7, activation='softmax')(x)  # Output layer for 7 classes

# Define the model
model = Model(inputs=inputs, outputs=x)

model.summary()

import tensorflow as tf
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_accuracy, top_k_categorical_accuracy
from tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D

# Example final layers in the model

# Define custom accuracy metrics for top-2 and top-3 accuracy
def top_3_accuracy(y_true, y_pred):
    return top_k_categorical_accuracy(y_true, y_pred, k=3)

def top_2_accuracy(y_true, y_pred):
    return top_k_categorical_accuracy(y_true, y_pred, k=2)

# Model checkpoint to save the best model based on val_top_3_accuracy
filepath = "model.keras"
checkpoint = ModelCheckpoint(filepath, monitor='val_top_3_accuracy', verbose=1,
                             save_best_only=True, mode='max')

# Reduce learning rate if validation accuracy does not improve
reduce_lr = ReduceLROnPlateau(monitor='val_top_3_accuracy', factor=0.5, patience=2,
                              verbose=1, mode='max', min_lr=0.00001)

# Compile the model with custom metrics
model.compile(
    optimizer=Adam(learning_rate=0.01),
    loss='categorical_crossentropy',
    metrics=[categorical_accuracy, top_2_accuracy, top_3_accuracy]
)

# Callbacks list for training
callbacks_list = [checkpoint, reduce_lr]

# Train the model using fit, which supports data generators directly
history = model.fit(
    train_batches,
    steps_per_epoch=int(train_steps),  # Convert to integer if needed
    class_weight=class_weights,
    validation_data=valid_batches,
    validation_steps=int(val_steps),  # Convert to integer if needed
    epochs=30,
    verbose=1,
    callbacks=callbacks_list
)

model.metrics_names

val_loss, val_cat_acc, val_top_2_acc, val_top_3_acc = \
model.evaluate_generator(test_batches,
                        steps=len(df_val))

print('val_loss:', val_loss)
print('val_cat_acc:', val_cat_acc)
print('val_top_2_acc:', val_top_2_acc)
print('val_top_3_acc:', val_top_3_acc)

model.load_weights('model.h5')

val_loss, val_cat_acc, val_top_2_acc, val_top_3_acc = \
model.evaluate_generator(test_batches,
                        steps=len(df_val))

print('val_loss:', val_loss)
print('val_cat_acc:', val_cat_acc)
print('val_top_2_acc:', val_top_2_acc)
print('val_top_3_acc:', val_top_3_acc)

import matplotlib.pyplot as plt

acc = history.history['categorical_accuracy']
val_acc = history.history['val_categorical_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
train_top2_acc = history.history['top_2_accuracy']
val_top2_acc = history.history['val_top_2_accuracy']
train_top3_acc = history.history['top_3_accuracy']
val_top3_acc = history.history['val_top_3_accuracy']
epochs = range(1, len(acc) + 1)

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.figure()
plt.plot(epochs, acc, 'bo', label='Training cat acc')
plt.plot(epochs, val_acc, 'b', label='Validation cat acc')
plt.title('Training and validation cat accuracy')
plt.legend()
plt.figure()


plt.plot(epochs, train_top2_acc, 'bo', label='Training top2 acc')
plt.plot(epochs, val_top2_acc, 'b', label='Validation top2 acc')
plt.title('Training and validation top2 accuracy')
plt.legend()
plt.figure()
plt.plot(epochs, train_top3_acc, 'bo', label='Training top3 acc')
plt.plot(epochs, val_top3_acc, 'b', label='Validation top3 acc')
plt.title('Training and validation top3 accuracy')
plt.legend()

plt.show()

test_labels = test_batches.classes

test_labels

test_batches.class_indices

predictions = model.predict_generator(test_batches, steps=len(df_val), verbose=1)

predictions.shape

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()

test_labels.shape

cm = confusion_matrix(test_labels, predictions.argmax(axis=1))

test_batches.class_indices

cm_plot_labels = ['akiec', 'bcc', 'bkl', 'df', 'mel','nv', 'vasc']

plot_confusion_matrix(cm, cm_plot_labels, title='Confusion Matrix')

y_pred = np.argmax(predictions, axis=1)

y_true = test_batches.classes

from sklearn.metrics import classification_report

# Generate a classification report
report = classification_report(y_true, y_pred, target_names=cm_plot_labels)

print(report)